* Main
** Startup time
#+begin_src emacs-lisp
(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                     (time-subtract after-init-time before-init-time)))
           gcs-done))
(add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src
** Lemacs files config
#+begin_src emacs-lisp
  (defvar lemacs/config-dir (expand-file-name "~/.lemacs.d")
    "Directory with systemvariables and peresistent storage")
  (load-file (concat lemacs/config-dir "/sysvars.el"))
  (defvar lemacs/notes-directory (expand-file-name "~/Notes")
    "Directory where org and denote files reside")
  (setq denote-directory (expand-file-name (concat lemacs/notes-directory "/denote")))
  (setq org-directory (expand-file-name (concat lemacs/notes-directory "/org")))
  (setq org-agenda-files (list org-directory))
#+end_src

Example of sysvars.el
#+begin_verse
(setq lemacs/notes-directory "~/Notes")
(setq user-full-name "John Doe")
#+end_verse
** Custom file
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
                       (load-file custom-file))
#+end_src
** Package
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")
  ))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-compute-statistics t)
  (setq use-package-verbose t)
#+end_src
** Various tweaks
#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (when (fboundp 'native-compile-async)
    (setq comp-deferred-compilation t))
  (setq native-comp-async-report-warnings-errors nil)
  (setq warning-minimum-level :error)
  ;(setq bookmark-default-file (concat lemacs/config-dir "/bookmarks"))
  (global-auto-revert-mode)
  (add-hook 'text-mode-hook 'tildify-mode)
  (setq ispell-dictionary "polish")
  (setq use-short-answers t)
  ;(setq recentf-save-file (concat lemacs/config-dir "/recentf"))
  (setq recentf-max-menu-items 50)
  (setq recentf-max-saved-items 50)
  (recentf-mode 1)
  (setq inhibit-startup-message t)
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (tooltip-mode -1)           ; Disable tooltips
  (menu-bar-mode -1)            ; Disable the menu bar
  (setq visible-bell t)
  (column-number-mode)
  (global-set-key (kbd "<escape>") 'keyboard-quit)
  ;; Avoid entering the ~repeat-complex-cammand~ when quiting everything with ~C-x~.
  (global-unset-key (kbd "C-x <escape> <escape>")) ; repeat-complex-command
  (setq text-scale-mode-step 1.1)
  ;; remembering the last place you visited in a file
  (save-place-mode 1)
#+end_src
** Backups
#+begin_src emacs-lisp
  ;; Save backup files to a dedicated directory.
  (setq backup-directory-alist
        `(("." . ,(concat lemacs/config-dir "/backups"))))
  (setq delete-old-versions -1)
  (auto-save-visited-mode)
  ;; Make numeric backup versions unconditionally.
  (setq version-control t)
  (setq vc-make-backup-files t)
  ;; Do not create lock files.
  (setq create-lockfiles nil)
#+end_src
** CUA-mode
#+begin_src emacs-lisp
(cua-mode t)
;; (setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
;; (transient-mark-mode 1) ;; No region when it is not highlighted
(setq cua-keep-region-after-copy t) ;; Standard Windows behaviour
#+end_src
** Git-bash in Windows
#+begin_src emacs-lisp
  (if (string-equal system-type "windows-nt")
      (setenv "PATH" (concat (getenv "PATH") ";" "C:\\Program Files\\Git\\usr\\bin")))
#+end_src
* Appearance
** Fonts
#+begin_src emacs-lisp
  (defun lemacs/setup-fonts ()
    "Setup font faces"
    (if (string-equal system-type     "windows-nt")
        (progn ;; Windows fonts
          (setq lemacs/font-default   "Hack")
          (setq lemacs/font-modeline  "Hack")
          (setq lemacs/font-variable  "Iosevka Aile"))
      (progn ;; Linux fonts
        (setq lemacs/font-default     "Iosevka Fixed")
        (setq lemacs/font-modeline    "Iosevka Light")
        (setq lemacs/font-variable    "Iosevka Aile")))
    (if (string-equal system-type "windows-nt")
        (setq lemacs/font-size 110))  
    (if (string-equal (system-name) "fractal")
        (setq lemacs/font-size 128))
    (if (string-equal (system-name) "commodus")
        (setq lemacs/font-size 107))
    (if (string-equal (system-name) "ludwig")
        (setq lemacs/font-size 128))
    (set-face-attribute 'default nil :height lemacs/font-size)
    (set-face-attribute 'default nil :font lemacs/font-default)
    )
  ;; run this hook after we have initialized the first time
  (add-hook 'after-init-hook 'lemacs/setup-fonts)
  ;; re-run this hook if we create a new frame from daemonized Emacs
  (add-hook 'server-after-make-frame-hook 'lemacs/setup-fonts)
#+end_src
** Themes
#+begin_src emacs-lisp
  (use-package doom-themes)
  (use-package ef-themes)
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1)
    :config
    (setq doom-modeline-buffer-file-name-style 'truncate-all)
    (setq doom-modeline-height 1) ; optional
    )
  (if (string-equal system-type "windows-nt")  
      (load-theme 'doom-monokai-pro t) ; Windows theme
    (load-theme 'ef-winter t)) ; Linux theme
#+end_src
* Default text scale
#+begin_src emacs-lisp
  (use-package default-text-scale
    :config (default-text-scale-mode))
#+end_src
* General.el
#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config
    (general-auto-unbind-keys)
    (general-create-definer lemacs/global-leader-key
      :keymaps 'override
      :states '(insert emacs normal visual hybrid emacs motion operator)
      :prefix "SPC"
      :non-normal-prefix "M-SPC")
    (general-create-definer lemacs/local-leader-key
      :keymaps '(normal insert visual emacs)
      :prefix "SPC m"
      :global-prefix "M-SPC m")
#+end_src
** Global leader
#+begin_src emacs-lisp
  (lemacs/global-leader-key
    ;; Varia
    "." 'embark-act
    "SPC" '(execute-extended-command :which-key "M-x")
    "c" 'org-capture
    "e" 'eval-last-sexp

    "b" '(:ignore t :which-key "buffer")
    "RET" 'consult-bookmark
    "`" 'previous-buffer
    "1" 'next-buffer
    "b b" 'consult-buffer
    "b i" 'ibuffer
    "b k" 'kill-current-buffer
    "b K" 'lemacs/nuke-all-buffers

    "f" '(:ignore t :which-key "file")
    "f c" '((lambda () (interactive)
              (find-file (expand-file-name "~/.emacs.d/config.org") ))
            :which-key "edit init.el")
    "f d" 'dired
    "f f" 'find-file
    "f r" 'consult-recent-file
    "f s" 'save-buffer

    "g" '(:ignore t :which-key "git")
    "g g" 'magit-status

    "h" '(:ignore t :which-key "help")
    "h r" '((lambda () (interactive)
              (load-file "~/.emacs.d/init.el"))
            :which-key "Reload emacs config")
    "h d" 'dashboard-refresh-buffer
    "h v" 'helpful-variable
    "h f" 'helpful-function
    "h b" 'helpful-key

    "m" '(:ignore t :which-key "local leader")

    "n" '(:ignore t :which-key "note")
    "n b" 'denote-link-show-backlinks-buffer
    "n l" 'denote-link-or-create
    "n n" 'denote
    "n o" 'denote-open-or-create
    "n s" '(lemacs/consult-ripgrep-notes-directory :which-key "search")

    "o" '(:ignore t :which-key "open")
    "o a" 'org-agenda

    "q" '(:ignore t :which-key "quit")
    "q q" 'evil-save-and-quit

    "s" '(:ignore t :which-key "search")
    "s s" 'consult-line
    "s g" 'consult-grep
    "s r" 'consult-ripgrep

    "t" '(:ignore t :which-key "toggle")
    "t a" 'toggle-transparency
    "t l" 'display-line-numbers-mode 
    "t t" '(consult-theme :which-key "choose theme")
    "t w" 'visual-line-mode
    "t c" 'visual-fill-column-mode

    "w" '(:ignore t :which-key "window")
    "w k" 'quit-window
    "w d" 'delete-window
    "w m" 'delete-other-windows
    "w o" 'other-window
    "w w" 'other-window
    "w r" 'split-window-right
    "w b" 'split-window-below
    )
#+end_src
** Local leader
*** Org-agenda
#+begin_src emacs-lisp
  (lemacs/local-leader-key
    :states '(motion normal)
    :keymaps 'org-agenda-mode-map
    "t" 'org-todo 
    "r" 'org-agenda-refile
    "m" (general-key "C-c")
  )
#+end_src
*** Org-mode
#+begin_src emacs-lisp
  (lemacs/local-leader-key
    :states 'normal
    :keymaps 'org-mode-map
    "t" 'org-todo 
    "e" 'org-export-dispatch
    "r" 'org-refile
    "R" 'org-refile-copy
    "m" (general-key "C-c")
  )
#+end_src
** Org-agenda
#+begin_src emacs-lisp
  (general-define-key
    :states 'motion
    :keymaps 'org-agenda-mode-map
    "z" 'org-agenda-view-mode-dispatch
    )
#+end_src
** Avy
#+begin_src emacs-lisp
  (general-define-key
    :states '(motion normal)
    "gs" 'avy-goto-char-2
    )
#+end_src
** Org-mode
#+begin_src emacs-lisp
  (general-define-key
      :states 'normal
      :keymaps 'org-mode-map
      "z i" 'org-toggle-inline-images
      "z n" 'org-tree-to-indirect-buffer
      )
#+end_src
** Dired
#+begin_src emacs-lisp
      (general-define-key
       :states 'normal
       :keymaps 'dired-mode-map
       "h" 'dired-up-directory)
#+end_src
** Close parens
#+begin_src emacs-lisp
)
#+end_src
* Evil
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)

    (define-key evil-insert-state-map (kbd "C-c") 'cua-copy-region)
    (define-key evil-insert-state-map (kbd "C-v") 'cua-paste)
    (define-key evil-insert-state-map (kbd "C-x") 'cua-cut-region)
    (define-key evil-insert-state-map (kbd "C-z") 'undo-fu-only-undo)
    (define-key evil-insert-state-map (kbd "C-y") 'undo-fu-only-redo)
    )

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
* Evil tutor
#+begin_src emacs-lisp
  (use-package evil-tutor
    :defer t)
#+end_src
* Completion
** All the icons
#+begin_src emacs-lisp
(use-package all-the-icons)
(use-package all-the-icons-completion
  :after (marginalia all-the-icons)
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode))
#+end_src
** Which key
#+begin_src emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (setq which-key-side-window-max-height 0.5)
    (setq which-key-idle-delay 0.5)
    (which-key-mode)
    )
#+end_src
** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key)
  )
#+end_src
** Vertico
#+begin_src emacs-lisp
      (use-package vertico
        :init
        (vertico-mode)
        (setq vertico-cycle nil)
        :bind (:map vertico-map
                    (("C-j" . vertico-next)
                     ("C-k" . vertico-previous)
                     ("TAB" . minibuffer-complete)
                     ("<escape>" . keyboard-escape-quit)))
        )

      ;; Persist history over Emacs restarts. Vertico sorts by history position.
      (use-package savehist
        :init
        (savehist-mode)
        :config
        (setq savehist-file (concat lemacs/config-dir "/history")))

      ;; A few more useful configurations...
      (use-package emacs
        :init
        ;; Add prompt indicator to `completing-read-multiple'.
        ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
        (defun crm-indicator (args)
          (cons (format "[CRM%s] %s"
                        (replace-regexp-in-string
                         "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                         crm-separator)
                        (car args))
                (cdr args)))
        (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

        ;; Do not allow the cursor in the minibuffer prompt
        (setq minibuffer-prompt-properties
              '(read-only t cursor-intangible t face minibuffer-prompt))
        (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

        ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
        ;; Vertico commands are hidden in normal buffers.
        ;; (setq read-extended-command-predicate
        ;;       #'command-completion-default-include-p)

        ;; Enable recursive minibuffers
        (setq enable-recursive-minibuffers t))

#+end_src
** Orderless
#+begin_src emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :bind (:map minibuffer-local-map ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src
** TODO Consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key (kbd "M-.")
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  )


#+end_src
** TODO Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :general
    (:keymaps 'corfu-map
              :states 'insert
              "C-j" #'corfu-next
              "C-k" #'corfu-previous
              "<escape>" #'corfu-quit
              "<return>" #'corfu-insert
              "M-d" #'corfu-show-documentation
              "M-l" #'corfu-show-location)
    :config
    (global-corfu-mode))
#+end_src
** TODO Embark
#+begin_src emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
** TODO Hydra
#+begin_src emacs-lisp
(use-package hydra
  :defer t
  :commands defhydra
  )

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

(lemacs/global-leader-key
  "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src
* Typo
#+begin_src emacs-lisp
  (use-package typo
    :config
    (typo-global-mode 1)
    (add-hook 'text-mode-hook 'typo-mode)
    (setq-default typo-language 'Polish)
    )
#+end_src
* Denote
#+begin_src emacs-lisp
  (use-package denote
    :config
    (setq denote-known-keywords '("spotkanie" "szkolenie" "osoba" "log"))
    )
#+end_src
* org-mode
#+begin_src emacs-lisp
  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . visual-line-mode)
    :config
    (setq org-confirm-babel-evaluate nil
          org-indirect-buffer-display 'current-window)
    (setq org-startup-indented t)
    (if (string-equal system-type "gnu/linux")
        (setq org-ellipsis " ▾"))
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-refile-targets '((nil :maxlevel . 9)
                               (org-agenda-files :maxlevel . 9)))
    (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
    (setq org-refile-use-outline-path 'file)                  ; Show full paths for refiling
    (setq org-todo-keywords
          '((sequence "TODO(t)"    ; a task
                      "PROJ(p)"    ; task made of tasks
                      "NEXT(n)"    ; next task in project
                      "DLGT(l)"    ; delegate this and \rarr WAIT
                      "IDEA(i)"    ; idea - review me
                      "STRT(s!)"   ; task started
                      "WAIT(w@/!)" ; wait for somebody 
                      "HOLD(h!)"   ; don't start doing this yet
                      "|"
                      "DONE(d!)"   ; completed task
                      "KILL(k!)"   ; cancelled projcet/task
                      "CMPL(c!)"   ; completed project 
                      )))

    (setq org-capture-templates
          '(
            ("t" "Today" entry
             (file "inbox.org")
             "* TODO %^{Title}\n SCHEDULED: %t\n :PROPERTIES:\n :CAPTURED: %U\n :END:\n"
             :empty-lines 1
             :kill-buffer t)
            ("s" "Schedule…" entry
             (file "inbox.org")
             "* TODO %^{Title}\n SCHEDULED: %^t\n :PROPERTIES:\n :CAPTURED: %U\n :END:\n"
             :empty-lines 1
             :kill-buffer t)
            ("d" "Deadline…" entry
             (file "inbox.org")
             "* TODO %^{Title}\n DEADLINE: %^t\n :PROPERTIES:\n :CAPTURED: %U\n :END:\n"
             :empty-lines 1
             :kill-buffer t)
            ("e" "Editable…" entry
             (file "inbox.org")
             "* TODO %^{Title}\n SCHEDULED: %^t\n :PROPERTIES:\n :CAPTURED: %U\n :END:\n %?" :empty-lines 1)
            ("r" "Org-drill" entry
             (file+headline "org-drill.org" "Inbox")
             "* %^  :drill:\n%^ \n** Answer \n%^")
            )
          )
    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
          '((:startgroup)
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)
            ))

    (setq org-agenda-sorting-strategy '(
                                        (agenda habit-down time-up deadline-up category-up priority-down)
                                        (todo priority-down category-keep)
                                        (tags priority-down category-keep)
                                        (search category-keep)
                                        ))
    (setq org-use-sub-superscripts t)
    (setq org-pretty-entities t)
    (setq org-pretty-entities-include-sub-superscripts t)
    (setq org-columns-default-format "%TODO %36ITEM %3PRIORITY %6Effort(Effort){:} %6CLOCKSUM")
    (add-to-list 'org-global-properties
                 '("Effort_ALL". "0 0:02 0:05 0:10 0:15 0:30 0:45 1:00 1:30 2:00"))
    (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t%-6e% s")
                                     (todo . " %i %-12:c")
                                     (tags . " %i %-12:c")
                                     (search . " %i %-12:c")))
    (setq org-hide-emphasis-markers nil)
    (setq org-log-into-drawer t)
    (setq org-agenda-window-setup 'current-window)
    (setq org-agenda-start-with-log-mode t)
    (setq org-agenda-skip-deadline-prewarning-if-scheduled t)
    (setq org-log-done 'time)
    (add-to-list 'org-latex-packages-alist '("AUTO" "babel" t ("pdflatex"))) ;; export language to pdfs generation
    (setq org-format-latex-options '(
                                     :foreground default
                                     :background default
                                     :scale 3
                                     :html-foreground "Black"
                                     :html-background "Transparent"
                                     :html-scale 1.0
                                     :matchers ("begin" "$1" "$" "$$" "\\(" "\\["
                                                )))

    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-show-habits-only-for-today nil)
    (setq org-agenda-span 10
          org-agenda-start-on-weekday nil
          )
    )

  (use-package evil-org
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (emacs-lisp . t)
       (python . t)
       (plantuml . t)
       )
     )

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))
  ;;(if (string-equal system-type "windows-nt")
  ;;(use-package org-outlook))
#+end_src
* org-modern
#+begin_src emacs-lisp
  (use-package org-modern
    )
#+end_src
* TODO org-appear
#+begin_src emacs-lisp
  (use-package org-appear
    :config
    (add-hook 'org-mode-hook 'org-appear-mode))
#+end_src
* TODO org-drill
#+begin_src emacs-lisp
(use-package org-drill)
#+end_src
* mixed-pitch
#+begin_src emacs-lisp
  (use-package mixed-pitch
    :hook
    ;; If you want it in all text modes:
    (text-mode . mixed-pitch-mode))
#+end_src
* language-tool
#+begin_src emacs-lisp
  (if (string-equal system-type "gnu/linux")  
      (use-package langtool
        :commands (langtool-check
                   langtool-check-done
                   langtool-show-message-at-point
                   langtool-correct-buffer)
        :init
        (setq langtool-default-language "pl-PL")
        (setq langtool-mother-tongue "pl")
        ;; (setq langtool-language-tool-jar "/usr/share/java/languagetool/languagetool-commandline.jar")
        (setq langtool-java-classpath
              "/usr/share/languagetool:/usr/share/java/languagetool/*")
        :config
        )
    )
#+end_src
* visual-fill-column
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :init
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    :config
    :hook (org-mode . visual-fill-column-mode))
#+end_src
* plantuml-mode
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :config
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    (setq plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
    (setq org-plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
    (setq plantuml-default-exec-mode 'jar)
    )
#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status)
    )
#+end_src
* Avy
#+begin_src emacs-lisp
  (use-package avy)
#+end_src
* Yassnippet
#+begin_src emacs-lisp
  (use-package yasnippet
  :config
  (yas-global-mode t)
  ;(setq yas-snippet-dirs (concat lemacs/config-dir "/snippets"))
  )
#+end_src
* Auto package update
#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t))
#+end_src

* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

** Configuring Dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :init      ;; tweak dashboard config before loading it
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Yay, EVIL!")
    (setq dashboard-startup-banner "~/.emacs.d/doom.png")  ;; use custom image as banner
    (setq dashboard-center-content t) ;; set to 't' for centered content
    (setq dashboard-items '(
                            (recents . 4)
                            (bookmarks . 4)
                            ))
    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book"))))
#+end_src

** Dashboard in Emacsclient
This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*.

#+begin_src emacs-lisp
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

* Smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config)
    ;;(smartparens-global-mode)
    ;;(show-smartparens-global-mode 1)
    )
#+end_src
* Fish mode
#+begin_src emacs-lisp
  (if (string-equal system-type "gnu/linux")
    (use-package fish-mode))
#+end_src
* Functions
** Notes search function
#+begin_src emacs-lisp
  (defun lemacs/consult-ripgrep-notes-directory ()
    (interactive)
    (consult-ripgrep lemacs/notes-directory ""))
#+end_src
** Transparency
#+begin_src emacs-lisp
(defun toggle-transparency ()
  "Crave for transparency!"
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(93 . 50) '(100 . 100)))))
#+end_src
** Kill all buffers
#+begin_src emacs-lisp
    (defun lemacs/nuke-all-buffers ()
      (interactive)
      (mapcar 'kill-buffer (buffer-list))
      (delete-other-windows)
      (dashboard-refresh-buffer)
      )
#+end_src
* Disabled/experimental
** org-mode
  (setq org-use-sub-superscripts t)
  (setq org-pretty-entities t)
  (setq org-pretty-entities-include-sub-superscripts t)
  (setq org-columns-default-format "%TODO %36ITEM %3PRIORITY %6Effort(Effort){:} %6CLOCKSUM")
  (add-to-list 'org-global-properties '("Effort_ALL". "0 0:02 0:05 0:10 0:15 0:30 0:45 1:00 1:30 2:00"))
  (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t%-6e% s")
                                   (todo . " %i %-12:c")
                                   (tags . " %i %-12:c")
                                   (search . " %i %-12:c")))
  (setq org-hide-emphasis-markers nil)
  (setq org-log-into-drawer t)
  (map! :leader
        :desc "Org-agenda follow mode"
        "m f" #'org-agenda-follow-mode)
  (setq org-agenda-start-with-log-mode t)
  (setq org-agenda-skip-deadline-prewarning-if-scheduled t)
  (setq org-log-done 'time)
** rg
#+begin_src emacs-lisp
  (use-package rg
    :disabled t)
#+end_src
** TODO No littering
#+begin_src emacs-lisp
  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  (setq user-emacs-directory lemacs/config-dir)

  (use-package no-littering
    ;:disabled t
    )

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src
** Command-log-mode
#+begin_src emacs-lisp
  (use-package command-log-mode
    :disabled t
    :commands command-log-mode)
#+end_src
** org fancy priorities
#+begin_src emacs-lisp
  (use-package org-fancy-priorities ; priority icons
    :disabled t
    :hook (org-mode . org-fancy-priorities-mode)
    :hook (org-agenda-mode . org-fancy-priorities-mode)
    :config (setq org-fancy-priorities-list '("⚑" "⬆" "■")))
#+end_src
